h1 {
  @extend %font-serif;

  color: $color-primary;

  @include respond-to('primary to secondary color') {
    color: $color-secondary;
  }
  @include respond-to('secondary to tertiary color') {
    color: $color-tertiary;
  }

}

h2 {
  @extend %font-serif;
  @extend %color-secondary;
}

h3 {
  @extend %font-serif;
  @extend %color-secondary;
}

h4 {
  @extend %font-sans;
  @extend %color-secondary;
}

h5 {
  @extend %font-sans;
}

h6 {
  @extend %font-sans;
}

p {
  @extend %font-sans;
}

a {
  @extend %color-tertiary;
}

.button--primary {
  @include button($color-primary);
}

.button--secondary {
  @include button($color-secondary);
}

$links: github, reddit, apple, android, windows;

@each $link in $links {
  a[href*="#{$link}"] {
    @extend %link-shared;
      &:before {
       @extend %ligatures;
        content: '#{$link}';
    }
  }
}

@for $i from 1 through length($links) {
  $bkg-lightness: 'light';
  @if yiq-contrast-color($color-tertiary) == $yiq-contrasted-light-default {
    $bkg-lightness: 'dark';
  }

  $step: 100 / (length($links) + 1) * $i;

  $bkg-color: $color-tertiary;
  @if $bkg-lightness == 'light' {
    $bkg-color: mix(black, $color-tertiary, $step);
  }
  @else {
    $bkg-color: mix(white, $color-tertiary, $step);
  }

  li:nth-of-type(#{$i}) {
    background-color: $bkg-color;

    a {
      color: yiq-contrast-color($bkg-color);
    }
  }
}

@import "cows/*.png";

$cow-sprite: sprite-map("cows/*.png");

@each $cow in sprite-names($cow-sprite) {
  .cow--#{$cow} {
    @extend %cows;
    @include cows-sprite($cow);
    width: image-width("cows/#{$cow}.png");
    height: image-height("cows/#{$cow}.png");
  }
}